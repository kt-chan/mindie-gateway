user nginx;
worker_processes auto;
pid /var/run/nginx/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Log config
    error_log stderr;
    access_log stdout;

    # Add Docker DNS resolver
    resolver 127.0.0.11 valid=30s;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile on;
    keepalive_timeout 65;

    # Map to check if mock response is enabled
    map $http_x_mock_response $use_mock {
        default 0;
        "true" 1;
        "enable" 1;
        "1" 1;
    }

    # Map to determine backend server
    map $use_mock $chat_backend {
        0 http://vllm:8000;
        1 http://127.0.0.1:8001;
    }

    # Mock vLLM server on port 8001
    server {
        listen 8001;
        server_name localhost;

        # Mock chat completions endpoint
        location /v1/chat/completions {
            add_header Content-Type application/json;
            return 200 '{"id": "chatcmpl-123","object": "chat.completion","created": 1677652288,"model": "gpt-4o-mock","choices":[{"index":0,"message":{"role":"assistant","content":"Hello! This is a mock response from the vLLM API gateway. Your API key was validated successfully."},"finish_reason":"stop"}],"usage":{"prompt_tokens":10,"completion_tokens":20,"total_tokens":30}}';
        }

        # Mock models endpoint
        location /v1/models {
            add_header Content-Type application/json;
            return 200 '{"object":"list","data":[{"id":"gpt-4o-mock","object":"model"}]}';
        }

        # Health check endpoint
        location /health {
            add_header Content-Type application/json;
            return 200 '{"status":"ok"}';
        }

        # Default response for other paths
        location / {
            add_header Content-Type application/json;
            return 404 '{"error":{"message":"The requested resource was not found","type":"invalid_request_error","code":"not_found"}}';
        }
    }

    # API Gateway server on port 80
    server {
        listen 80;
        server_name localhost;

        # Add Docker DNS resolver
        resolver 127.0.0.11 valid=30s;
        
        location /v1/chat/completions {
            # Always validate API key first
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;
            
            # Handle auth failures
            error_page 401 = @fallback_auth;
            error_page 500  = @auth_error;
            error_page 502 503 504 = @service_error;

            # Proxy to appropriate backend based on mock flag
            proxy_pass $chat_backend/v1/chat/completions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;

            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        location /auth {
            internal;
            proxy_pass http://127.0.0.1:8020/validate;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            
            # Handle auth service failures
            proxy_intercept_errors on;
            error_page 500 502 503 504 = @auth_error;
        }

        location /v1/models {
            # Proxy to appropriate backend based on mock flag
            proxy_pass $chat_backend/v1/models;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;

            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            error_page 500 502 503 504 = @service_error;
        }

        location @fallback_auth {
            add_header Content-Type application/json;
            return 401 '{"error":{"message":"Unauthorized: Invalid API key","type":"invalid_request_error","code":"invalid_api_key"}}';
        }

        location @auth_error {
            add_header Content-Type application/json;
            return 500 '{"error":{"message":"Authentication service unavailable","type":"server_error","code":"auth_service_error"}}';
        }

        location @service_error {
            add_header Content-Type application/json;
            return 503 '{"error":{"message":"MindIE service unavailable","type":"server_error","code":"mindie_service_error"}}';
        }

        # vLLM server health check
        location /health {
            proxy_pass http://127.0.0.1:8020/health;
            proxy_intercept_errors on;
            error_page 500 502 503 504 = @auth_error;
        }
        
        # Simple status page
        location / {
            add_header Content-Type text/plain;
            return 200 "vLLM API Gateway is running. Use /v1/chat/completions with your API key.";
        }

        # Default error page
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}

